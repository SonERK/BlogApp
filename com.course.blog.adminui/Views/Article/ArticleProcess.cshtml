
@{
    ViewData["Title"] = "ArticleProcess";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@section styles
{

}


<div class="row">
    <div class="col-lg-12">
        <!--begin::Card-->
        <div class="card card-custom gutter-b example example-compact">
            <div class="card-header">
                <h3 class="card-title">@ViewData["Title"]</h3>
                <div class="card-toolbar">
                    <div class="example-tools justify-content-center">
                        <a href='@Url.Action("Articles","Article")' class="btn btn-primary mr-2"> Articles</a>
                    </div>
                </div>
            </div>
            <!--begin::Form-->
            <form id="blogForm" class="form">
                <div class="card-body">
                    <div class="form-group">
                        <label>Category:</label>
                        @Html.DropDownList("Categories", null, "Select Category", new { @class = "form-control", @id = "category" })
                    </div>
                    <div class="form-group">
                        <label>SubCategory:</label>
                        @Html.DropDownList("SubCategories", null, "Select SubCategory", new { @class = "form-control", @id = "subCategory" })
                    </div>
                    <div class="form-group">
                        <label>Subject:</label>
                        <input id="subject" type="text" name="subject" class="form-control form-control-solid" placeholder="Enter subject" />
                    </div>
                    <div class="form-group">
                        <label>Short Detail:</label>
                        <input id="shortDetail" type="text" name="shortDetail" class="form-control form-control-solid" placeholder="Enter short detail" />
                    </div>
                    <div class="form-group">
                        <label>Tags:</label>
                        <input id="tags" type="text" name="tags" class="form-control form-control-solid" placeholder="Enter tags" />
                    </div>
                    <div class="form-group">
                        <label>Detail:</label>
                        <textarea id="detail" class="form-control" name="detail" style="height: 400px;"></textarea>
                    </div>
                </div>
                <div class="card-footer">
                    <button id="btnSave" type="button" class="btn btn-primary mr-2">Save</button>
                    <button type="reset" class="btn btn-secondary">Clear</button>
                </div>
            </form>
            <!--end::Form-->
        </div>
        <!--end::Card-->
    </div>
</div>

@Html.Hidden("id")

@section scripts
{
    <script src='@Url.Content("/assets/js/pages/crud/forms/editors/summernote.js?v=7.0.5")'></script>

    <script type="text/javascript">
        "use strict";

        $('[name="detail"]')
            .summernote({
                height: 400
            })
            .on('summernote.change', function (customEvent, contents, $editable) {
                // Revalidate the content when its value is changed by Summernote
                fv.revalidateField('detail');
            });

        // Class Definition
        var KTForm = function () {
            var _form;

            var _handleForm = function () {
                var validation;

                // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/
                validation = FormValidation.formValidation(
                    KTUtil.getById('blogForm'),
                    {
                        fields: {
                            Categories: {
                                validators: {
                                    notEmpty: {
                                        message: 'Category is not empty!'
                                    }
                                }
                            },
                            SubCategories: {
                                validators: {
                                    notEmpty: {
                                        message: 'SubCategory is not empty!'
                                    }
                                }
                            },
                            subject: {
                                validators: {
                                    notEmpty: {
                                        message: 'Subject is not empty!'
                                    }
                                }
                            },
                            shortDetail: {
                                validators: {
                                    notEmpty: {
                                        message: 'Short Detail is not empty!'
                                    }
                                }
                            },
                            tags: {
                                validators: {
                                    notEmpty: {
                                        message: 'Tags is not empty!'
                                    }
                                }
                            },
                            detail: {
                                validators: {
                                    callback: {
                                        message: 'The content is required and cannot be empty',
                                        callback: function (input) {
                                            const code = $('[name="detail"]').summernote('code');
                                            // <p><br></p> is code generated by Summernote for empty content
                                            return (code !== '' && code !== '<p><br></p>');
                                        }
                                    }
                                }
                            },
                        },
                        plugins: {
                            trigger: new FormValidation.plugins.Trigger(),
                            submitButton: new FormValidation.plugins.SubmitButton(),
                            //defaultSubmit: new FormValidation.plugins.DefaultSubmit(), // Uncomment this line to enable normal button submit after form validation
                            bootstrap: new FormValidation.plugins.Bootstrap()
                        }
                    }
                );

                $('#btnSave').on('click', function (e) {
                    e.preventDefault();

                    validation.validate().then(function (status) {
                        if (status == 'Valid') {

                            var article = {
                                SubCategoryId: $("#subCategory").val(),
                                Subject: $("#subject").val(),
                                ShortDetail: $("#shortDetail").val(),
                                Tags: $("#tags").val(),
                                Detail: $("#detail").summernote('code')
                            };

                            if ($("#id").val() != "") {
                                $.ajax({
                                    type: "POST",
                                    dataType: "JSON",
                                    url: '@Url.Action("UpdateArticle", "Article")',
                                    data: { id: $("#id").val(), article: article },
                                    success: function (result) {
                                        if (result) {
                                            toastr.success("Article Updated !");
                                        } else {
                                            toastr.error("Process does not completed !");
                                        }
                                    }
                                });
                            } else {
                                $.ajax({
                                    type: "POST",
                                    dataType: "JSON",
                                    url: '@Url.Action("SaveArticle", "Article")',
                                    data: { article: article },
                                    success: function (result) {
                                        if (result) {
                                            toastr.success("Article Added !");
                                        } else {
                                            toastr.error("Process does not completed !");
                                        }
                                    }
                                });
                            }



                        } else {
                            swal.fire({
                                text: "One more errors detected on your form !",
                                icon: "error",
                                buttonsStyling: false,
                                confirmButtonText: "Ok, Got it !",
                                customClass: {
                                    confirmButton: "btn font-weight-bold btn-light-primary"
                                }
                            }).then(function () {
                                KTUtil.scrollTop();
                            });
                        }
                    });
                });

            }



            // Public Functions
            return {
                // public functions
                init: function () {
                    _form = $('#blogForm');

                    _handleForm();
                }
            };
        }();

        function getArticle() {
            $.ajax({
                type: "POST",
                dataType: "JSON",
                url: '@Url.Action("GetArticle", "Article")',
                data: { id: $("#id").val(), },
                success: function (result) {
                    getSubCategories();
                    if (result != null) {

                        $("#category").val(result.categoryId);

                        $.ajax({
                            type: "POST",
                            dataType: "JSON",
                            url: '@Url.Action("GetSubCategories", "Article")',
                            data: { categoryId: $("#category").val(), },
                            success: function (result) {
                                if (result != null) {

                                    $("#subCategory").empty();

                                    $.each(result, function (index, value) {
                                        $("#subCategory").append("<option value='" + value.id + "'>" + value.text + "</option>");
                                    });

                                    $("#subCategory").val(result.subCategoryId);
                                }
                            }
                        });
                     
                        $("#subject").val(result.subject);
                        $("#shortDetail").val(result.shortDetail);
                        $("#tags").val(result.tags);
                        $("#detail").summernote('code', result.detail)
                    }
                }
            });
        }

        function getSubCategories() {

            $.ajax({
                type: "POST",
                dataType: "JSON",
                url: '@Url.Action("GetSubCategories", "Article")',
                data: { categoryId: $("#category").val(), },
                success: function (result) {
                    if (result != null) {

                        $("#subCategory").empty();

                        $.each(result, function (index, value) {
                            $("#subCategory").append("<option value='" + value.id + "'>" + value.text + "</option>");
                        });
                    }
                }
            });
        }

        $("#category").change(function () {
            getSubCategories();
        });

        $.urlParam = function (name) {
            var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
            if (results == null) {
                return null;
            }
            return decodeURI(results[1]) || 0;
        }

        // Class Initialization
        jQuery(document).ready(function () {
            KTForm.init();

            if ($.urlParam('id') != null) {
                $("#id").val($.urlParam('id'));

                getArticle();
            }
        });

    </script>
}


